// Files
var HTTPS = require('https');
var path = require('path');
var response = require('../assets/response.js');

// Variables
var filename = path.basename(__filename).replace(".js", ""); // Used to find the bot ID
var options = {
  hostname: 'api.groupme.com',
  path: '/v3/bots/post',
  method: 'POST'
};
var messagePrompts = [
  {
    Prompt: new RegExp(/(how do i send newlines)/ig), /* Single prompt */
    Responses: ["Newline\nexample\nyou're\nwelcome."] /* Demonstrate newline usage */
  },
  {
    Prompt: new RegExp(/(what is my name)/ig), /* Single prompt */
    Responses: ["Your name is {{user_name}}"] /* Demonstrate name placeholder */
  },
  {
    Prompt: new RegExp(/(copy my text)/ig), /* Single prompt */
    Responses: ["The text you sent was\n\n{{user_text}}"] /* Demonstrate user text placeholder */
  },
  {
    Prompt: new RegExp(/(hello)|(hey)|(goodmorning)/ig), /* Messages to reply to */
    Responses: ["Sup", "How goes it", "Keep it real"] /* Random response from array, do NOT use special chars */
  }
];

/*
  Standard new message handler
*/
function handler() {
  // Variables
  var request = JSON.parse(this.req.chunks[0]);
  var matched = false;

  // Standard request validation
  if (!request.text || !request.sender_type || request.sender_type != "user") {
    this.res.writeHead(200);
    this.res.end();
    return false;
  }

  // Find correct prompt
  messagePrompts.forEach(function(messagePrompt) {
    // Check against prompt
    if (!matched && messagePrompt.Prompt.test(request.text)) {
      // Reply
      matched = true;
      sendReply(messagePrompt.Responses, request);
      return true;
    }
  });

  // Default
  this.res.writeHead(200);
  this.res.end();
}

function sendReply(replyOptions, request) {
  // Validate replyOptions parameter
  if (!replyOptions || !(replyOptions instanceof Array) || replyOptions.length < 1) {
    console.log("No valid reply options provided");
    return false;
  }
  // Validate BOT_ID environment variable
  if (!process.env[filename] || typeof(process.env[filename]) !== "string") {
    console.log("No valid bot ID found in environment variables");
    return false;
  }

  // Variables
  var text = replyOptions[Math.floor(Math.random() * replyOptions.length)];
  var botResponse = response.build(text, request, process.env[filename]);
  var botReq = HTTPS.request(options, function(res) {
    if (res.statusCode != 202) {
      console.log('Message failed to send with a HTTP ' + res.statusCode);
    }
  });

  // Validate botResponse
  if (!botResponse) {
    console.log("No valid bot response generated by response.build()");
    return false;
  }

  // Events
  botReq.on('error', function(err) {
    console.log('Message failed to send with a error ' + JSON.stringify(err));
  });
  botReq.on('timeout', function(err) {
    console.log('Message failed to send with a timeout ' + JSON.stringify(err));
  });

  // Send Request
  botReq.end(JSON.stringify(botResponse));
}

// Export function
exports.handler = handler;
